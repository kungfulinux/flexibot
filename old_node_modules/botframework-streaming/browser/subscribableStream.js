"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @module botframework-streaming
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var stream_1 = require("stream");
var SubscribableStream = /** @class */ (function (_super) {
    __extends(SubscribableStream, _super);
    function SubscribableStream(options) {
        var _this = _super.call(this, options) || this;
        _this.length = 0;
        _this.bufferList = [];
        return _this;
    }
    SubscribableStream.prototype._write = function (chunk, encoding, callback) {
        var buffer = Buffer.from(chunk);
        this.bufferList.push(buffer);
        this.length += chunk.length;
        if (this._onData) {
            this._onData(buffer);
        }
        callback();
    };
    SubscribableStream.prototype._read = function (size) {
        if (this.bufferList.length === 0) {
            // null signals end of stream
            this.push(null);
        }
        else {
            var total = 0;
            while (total < size && this.bufferList.length > 0) {
                var buffer = this.bufferList[0];
                this.push(buffer);
                this.bufferList.splice(0, 1);
                total += buffer.length;
            }
        }
    };
    SubscribableStream.prototype.subscribe = function (onData) {
        this._onData = onData;
    };
    return SubscribableStream;
}(stream_1.Duplex));
exports.SubscribableStream = SubscribableStream;
//# sourceMappingURL=subscribableStream.js.map