"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @module botframework-streaming
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var subscribableStream_1 = require("../subscribableStream");
var payloads_1 = require("../payloads");
var contentStream_1 = require("../contentStream");
/**
 * Assembles payloads for streaming library.
 */
var PayloadAssembler = /** @class */ (function () {
    function PayloadAssembler(streamManager, params) {
        this._byteOrderMark = 0xFEFF;
        this._utf = 'utf8';
        if (params.header) {
            this.id = params.header.id;
            this.payloadType = params.header.payloadType;
            this.contentLength = params.header.payloadLength;
            this.end = params.header.end;
        }
        else {
            this.id = params.id;
        }
        if (!this.id) {
            throw Error('An ID must be supplied when creating an assembler.');
        }
        this._streamManager = streamManager;
        this._onCompleted = params.onCompleted;
    }
    PayloadAssembler.prototype.getPayloadStream = function () {
        if (!this.stream) {
            this.stream = this.createPayloadStream();
        }
        return this.stream;
    };
    PayloadAssembler.prototype.onReceive = function (header, stream, contentLength) {
        this.end = header.end;
        if (header.payloadType === payloads_1.PayloadTypes.response || header.payloadType === payloads_1.PayloadTypes.request) {
            this.process(stream)
                .then()
                .catch();
        }
        else if (header.end) {
            stream.end();
        }
    };
    PayloadAssembler.prototype.close = function () {
        this._streamManager.closeStream(this.id);
    };
    PayloadAssembler.prototype.createPayloadStream = function () {
        return new subscribableStream_1.SubscribableStream();
    };
    PayloadAssembler.prototype.payloadFromJson = function (json) {
        return JSON.parse((json.charCodeAt(0) === this._byteOrderMark) ? json.slice(1) : json);
    };
    PayloadAssembler.prototype.stripBOM = function (input) {
        return (input.charCodeAt(0) === this._byteOrderMark) ? input.slice(1) : input;
    };
    PayloadAssembler.prototype.process = function (stream) {
        return __awaiter(this, void 0, void 0, function () {
            var streamData, streamDataAsString;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        streamData = stream.read(stream.length);
                        if (!streamData) {
                            return [2 /*return*/];
                        }
                        streamDataAsString = streamData.toString(this._utf);
                        if (!(this.payloadType === payloads_1.PayloadTypes.request)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.processRequest(streamDataAsString)];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 2:
                        if (!(this.payloadType === payloads_1.PayloadTypes.response)) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.processResponse(streamDataAsString)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    PayloadAssembler.prototype.processResponse = function (streamDataAsString) {
        return __awaiter(this, void 0, void 0, function () {
            var responsePayload, receiveResponse;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        responsePayload = this.payloadFromJson(this.stripBOM(streamDataAsString));
                        receiveResponse = { streams: [], statusCode: responsePayload.statusCode };
                        return [4 /*yield*/, this.processStreams(responsePayload, receiveResponse)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    PayloadAssembler.prototype.processRequest = function (streamDataAsString) {
        return __awaiter(this, void 0, void 0, function () {
            var requestPayload, receiveRequest;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        requestPayload = this.payloadFromJson(streamDataAsString);
                        receiveRequest = { streams: [], path: requestPayload.path, verb: requestPayload.verb };
                        return [4 /*yield*/, this.processStreams(requestPayload, receiveRequest)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    PayloadAssembler.prototype.processStreams = function (responsePayload, receiveResponse) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (responsePayload.streams) {
                            responsePayload.streams.forEach(function (responseStream) {
                                var contentAssembler = _this._streamManager.getPayloadAssembler(responseStream.id);
                                contentAssembler.payloadType = responseStream.contentType;
                                contentAssembler.contentLength = responseStream.length;
                                receiveResponse.streams.push(new contentStream_1.ContentStream(responseStream.id, contentAssembler));
                            });
                        }
                        return [4 /*yield*/, this._onCompleted(this.id, receiveResponse)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return PayloadAssembler;
}());
exports.PayloadAssembler = PayloadAssembler;
//# sourceMappingURL=payloadAssembler.js.map