"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var payloadTypes_1 = require("../payloads/payloadTypes");
var headerSerializer_1 = require("../payloads/headerSerializer");
var payloadConstants_1 = require("../payloads/payloadConstants");
var transportDisconnectedEvent_1 = require("./transportDisconnectedEvent");
/**
 * Payload receiver for streaming.
 */
var PayloadReceiver = /** @class */ (function () {
    function PayloadReceiver() {
        this.disconnected = function (sender, events) { };
    }
    /**
     * Connects to a transport receiver
     *
     * @param receiver The [ITransportReceiver](xref:botframework-streaming.ITransportReceiver) object to pull incoming data from.
     */
    PayloadReceiver.prototype.connect = function (receiver) {
        if (this.isConnected) {
            throw new Error('Already connected.');
        }
        else {
            this._receiver = receiver;
            this.isConnected = true;
            this.runReceive();
        }
    };
    /**
     * Allows subscribing to this receiver in order to be notified when new data comes in.
     *
     * @param getStream Callback when a new stream has been received.
     * @param receiveAction Callback when a new message has been received.
     */
    PayloadReceiver.prototype.subscribe = function (getStream, receiveAction) {
        this._getStream = getStream;
        this._receiveAction = receiveAction;
    };
    /**
     * Force this receiver to disconnect.
     *
     * @param e Event arguments to include when broadcasting disconnection event.
     */
    PayloadReceiver.prototype.disconnect = function (e) {
        var didDisconnect;
        try {
            if (this.isConnected) {
                this._receiver.close();
                didDisconnect = true;
                this.isConnected = false;
            }
        }
        catch (error) {
            this.isConnected = false;
            this.disconnected(this, new transportDisconnectedEvent_1.TransportDisconnectedEvent(error.message));
        }
        this._receiver = null;
        this.isConnected = false;
        if (didDisconnect) {
            this.disconnected(this, e || transportDisconnectedEvent_1.TransportDisconnectedEvent.Empty);
        }
    };
    PayloadReceiver.prototype.runReceive = function () {
        this.receivePackets()
            .catch();
    };
    PayloadReceiver.prototype.receivePackets = function () {
        return __awaiter(this, void 0, void 0, function () {
            var isClosed, readSoFar, _a, header, isStream, bytesActuallyRead, contentStream, count, _b, error_1;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (!(this.isConnected && !isClosed)) return [3 /*break*/, 11];
                        _c.label = 1;
                    case 1:
                        _c.trys.push([1, 9, , 10]);
                        readSoFar = 0;
                        _c.label = 2;
                    case 2:
                        if (!(readSoFar < payloadConstants_1.PayloadConstants.MaxHeaderLength)) return [3 /*break*/, 4];
                        _a = this;
                        return [4 /*yield*/, this._receiver.receive(payloadConstants_1.PayloadConstants.MaxHeaderLength - readSoFar)];
                    case 3:
                        _a._receiveHeaderBuffer = _c.sent();
                        if (this._receiveHeaderBuffer) {
                            readSoFar += this._receiveHeaderBuffer.length;
                        }
                        return [3 /*break*/, 2];
                    case 4:
                        header = headerSerializer_1.HeaderSerializer.deserialize(this._receiveHeaderBuffer);
                        isStream = header.payloadType === payloadTypes_1.PayloadTypes.stream;
                        if (!(header.payloadLength > 0)) return [3 /*break*/, 8];
                        bytesActuallyRead = 0;
                        contentStream = this._getStream(header);
                        _c.label = 5;
                    case 5:
                        if (!(bytesActuallyRead < header.payloadLength && bytesActuallyRead < payloadConstants_1.PayloadConstants.MaxPayloadLength)) return [3 /*break*/, 7];
                        count = Math.min(header.payloadLength - bytesActuallyRead, payloadConstants_1.PayloadConstants.MaxPayloadLength);
                        _b = this;
                        return [4 /*yield*/, this._receiver.receive(count)];
                    case 6:
                        _b._receivePayloadBuffer = _c.sent();
                        bytesActuallyRead += this._receivePayloadBuffer.byteLength;
                        contentStream.write(this._receivePayloadBuffer);
                        // If this is a stream we want to keep handing it up as it comes in
                        if (isStream) {
                            this._receiveAction(header, contentStream, bytesActuallyRead);
                        }
                        return [3 /*break*/, 5];
                    case 7:
                        if (!isStream) {
                            this._receiveAction(header, contentStream, bytesActuallyRead);
                        }
                        _c.label = 8;
                    case 8: return [3 /*break*/, 10];
                    case 9:
                        error_1 = _c.sent();
                        isClosed = true;
                        this.disconnect(new transportDisconnectedEvent_1.TransportDisconnectedEvent(error_1.message));
                        return [3 /*break*/, 10];
                    case 10: return [3 /*break*/, 0];
                    case 11: return [2 /*return*/];
                }
            });
        });
    };
    return PayloadReceiver;
}());
exports.PayloadReceiver = PayloadReceiver;
//# sourceMappingURL=payloadReceiver.js.map