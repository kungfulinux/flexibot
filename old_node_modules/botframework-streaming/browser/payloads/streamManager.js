"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var payloadAssembler_1 = require("../assemblers/payloadAssembler");
/**
 * Orchestrates and manages streams.
 */
var StreamManager = /** @class */ (function () {
    function StreamManager(onCancelStream) {
        this.activeAssemblers = [];
        this.onCancelStream = onCancelStream;
    }
    StreamManager.prototype.getPayloadAssembler = function (id) {
        if (!this.activeAssemblers[id]) {
            // A new id has come in, kick off the process of tracking it.
            var assembler = new payloadAssembler_1.PayloadAssembler(this, { id: id });
            this.activeAssemblers[id] = assembler;
            return assembler;
        }
        else {
            return this.activeAssemblers[id];
        }
    };
    StreamManager.prototype.getPayloadStream = function (header) {
        var assembler = this.getPayloadAssembler(header.id);
        return assembler.getPayloadStream();
    };
    StreamManager.prototype.onReceive = function (header, contentStream, contentLength) {
        if (!this.activeAssemblers[header.id]) {
            return;
        }
        this.activeAssemblers[header.id].onReceive(header, contentStream, contentLength);
    };
    StreamManager.prototype.closeStream = function (id) {
        if (!this.activeAssemblers[id]) {
            return;
        }
        else {
            var assembler = this.activeAssemblers[id];
            this.activeAssemblers.splice(this.activeAssemblers.indexOf(id), 1);
            var targetStream = assembler.getPayloadStream();
            if ((assembler.contentLength && targetStream.length < assembler.contentLength) || !assembler.end) {
                this.onCancelStream(assembler);
            }
        }
    };
    return StreamManager;
}());
exports.StreamManager = StreamManager;
//# sourceMappingURL=streamManager.js.map