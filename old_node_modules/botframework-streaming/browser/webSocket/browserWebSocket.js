"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var utilities_1 = require("../utilities");
var createWebSocket = function (url) {
    if (!url) {
        throw new TypeError('Unable to create WebSocket without url.');
    }
    if (utilities_1.doesGlobalWebSocketExist()) {
        return new Function("return new WebSocket('" + url + "');")();
    }
    throw new ReferenceError('Unable to find global.WebSocket which is required for constructing a BrowserWebSocket.');
};
var createFileReader = function () {
    if (utilities_1.doesGlobalFileReaderExist()) {
        return new Function("return new FileReader();")();
    }
    throw new ReferenceError('Unable to find global.FileReader. Unable to create FileReader for BrowserWebSocket.');
};
var BrowserWebSocket = /** @class */ (function () {
    /**
     * Creates a new instance of the [BrowserWebSocket](xref:botframework-streaming.BrowserWebSocket) class.
     *
     * @param socket The socket object to build this connection on.
     */
    function BrowserWebSocket(socket) {
        if (socket) {
            this.webSocket = socket;
        }
    }
    /**
     * Connects to the supporting socket using WebSocket protocol.
     *
     * @param serverAddress The address the server is listening on.
     */
    BrowserWebSocket.prototype.connect = function (serverAddress) {
        return __awaiter(this, void 0, void 0, function () {
            var resolver, rejector;
            return __generator(this, function (_a) {
                if (!this.webSocket) {
                    this.webSocket = createWebSocket(serverAddress);
                }
                this.webSocket.onerror = function (e) {
                    rejector(e);
                };
                this.webSocket.onopen = function (e) {
                    resolver(e);
                };
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        resolver = resolve;
                        rejector = reject;
                    })];
            });
        });
    };
    Object.defineProperty(BrowserWebSocket.prototype, "isConnected", {
        /**
         * True if the socket is currently connected.
         */
        get: function () {
            return this.webSocket.readyState === 1;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Writes a buffer to the socket and sends it.
     *
     * @param buffer The buffer of data to send across the connection.
     */
    BrowserWebSocket.prototype.write = function (buffer) {
        this.webSocket.send(buffer);
    };
    /**
     * Close the socket.
     */
    BrowserWebSocket.prototype.close = function () {
        this.webSocket.close();
    };
    /**
     * Set the handler for text and binary messages received on the socket.
     */
    BrowserWebSocket.prototype.setOnMessageHandler = function (handler) {
        var bufferKey = 'buffer';
        var packets = [];
        this.webSocket.onmessage = function (evt) {
            var fileReader = createFileReader();
            var queueEntry = { buffer: null };
            packets.push(queueEntry);
            fileReader.onload = function (e) {
                var t = e.target;
                queueEntry[bufferKey] = t.result;
                if (packets[0] === queueEntry) {
                    while (0 < packets.length && packets[0][bufferKey]) {
                        handler(packets[0][bufferKey]);
                        packets.splice(0, 1);
                    }
                }
            };
            fileReader.readAsArrayBuffer(evt.data);
        };
    };
    /**
     * Set the callback to call when encountering errors.
     */
    BrowserWebSocket.prototype.setOnErrorHandler = function (handler) {
        this.webSocket.onerror = function (error) { if (error) {
            handler(error);
        } };
    };
    /**
     * Set the callback to call when encountering socket closures.
     */
    BrowserWebSocket.prototype.setOnCloseHandler = function (handler) {
        this.webSocket.onclose = handler;
    };
    return BrowserWebSocket;
}());
exports.BrowserWebSocket = BrowserWebSocket;
//# sourceMappingURL=browserWebSocket.js.map