"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Web socket based transport.
 */
var WebSocketTransport = /** @class */ (function () {
    /**
     * Creates a new instance of the [WebSocketTransport](xref:botframework-streaming.WebSocketTransport) class.
     *
     * @param ws The ISocket to build this transport on top of.
     */
    function WebSocketTransport(ws) {
        var _this = this;
        this._socket = ws;
        this._queue = [];
        this._activeOffset = 0;
        this._activeReceiveCount = 0;
        this._socket.setOnMessageHandler(function (data) {
            _this.onReceive(data);
        });
        this._socket.setOnErrorHandler(function (err) {
            _this.onError(err);
        });
        this._socket.setOnCloseHandler(function () {
            _this.onClose();
        });
    }
    /**
     * Sends the given buffer out over the socket's connection.
     *
     * @param buffer The buffered data to send out over the connection.
     */
    WebSocketTransport.prototype.send = function (buffer) {
        if (this._socket && this._socket.isConnected) {
            this._socket.write(buffer);
            return buffer.length;
        }
        return 0;
    };
    Object.defineProperty(WebSocketTransport.prototype, "isConnected", {
        /**
         * Returns true if the transport is connected to a socket.
         */
        get: function () {
            return this._socket.isConnected;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Close the socket this transport is connected to.
     */
    WebSocketTransport.prototype.close = function () {
        if (this._socket && this._socket.isConnected) {
            this._socket.close();
        }
    };
    /**
     * Attempt to receive incoming data from the connected socket.
     *
     * @param count The number of bytes to attempt to receive.
     * @returns A buffer populated with the received data.
     */
    WebSocketTransport.prototype.receive = function (count) {
        return __awaiter(this, void 0, void 0, function () {
            var promise;
            var _this = this;
            return __generator(this, function (_a) {
                if (this._activeReceiveResolve) {
                    throw new Error('Cannot call receive more than once before it has returned.');
                }
                this._activeReceiveCount = count;
                promise = new Promise(function (resolve, reject) {
                    _this._activeReceiveResolve = resolve;
                    _this._activeReceiveReject = reject;
                });
                this.trySignalData();
                return [2 /*return*/, promise];
            });
        });
    };
    /**
     * Sets the transport to attempt to receive incoming data that has not yet arrived.
     *
     * @param data A buffer to store incoming data in.
     */
    WebSocketTransport.prototype.onReceive = function (data) {
        if (this._queue && data && data.byteLength > 0) {
            this._queue.push(Buffer.from(data));
            this.trySignalData();
        }
    };
    WebSocketTransport.prototype.onClose = function () {
        if (this._activeReceiveReject) {
            this._activeReceiveReject(new Error('Socket was closed.'));
        }
        this._active = null;
        this._activeOffset = 0;
        this._activeReceiveResolve = null;
        this._activeReceiveReject = null;
        this._activeReceiveCount = 0;
        this._socket = null;
    };
    WebSocketTransport.prototype.onError = function (err) {
        if (this._activeReceiveReject) {
            this._activeReceiveReject(err);
        }
        this.onClose();
    };
    WebSocketTransport.prototype.trySignalData = function () {
        if (this._activeReceiveResolve) {
            if (!this._active && this._queue.length > 0) {
                this._active = this._queue.shift();
                this._activeOffset = 0;
            }
            if (this._active) {
                if (this._activeOffset === 0 && this._active.length === this._activeReceiveCount) {
                    // can send the entire _active buffer
                    var buffer = this._active;
                    this._active = null;
                    this._activeReceiveResolve(buffer);
                }
                else {
                    // create a Buffer.from and copy some of the contents into it
                    var available = Math.min(this._activeReceiveCount, this._active.length - this._activeOffset);
                    var buffer = Buffer.alloc(available);
                    this._active.copy(buffer, 0, this._activeOffset, this._activeOffset + available);
                    this._activeOffset += available;
                    // if we used all of active, set it to undefined
                    if (this._activeOffset >= this._active.length) {
                        this._active = null;
                        this._activeOffset = 0;
                    }
                    this._activeReceiveResolve(buffer);
                }
                this._activeReceiveCount = 0;
                this._activeReceiveReject = null;
                this._activeReceiveResolve = null;
            }
        }
    };
    return WebSocketTransport;
}());
exports.WebSocketTransport = WebSocketTransport;
//# sourceMappingURL=webSocketTransport.js.map