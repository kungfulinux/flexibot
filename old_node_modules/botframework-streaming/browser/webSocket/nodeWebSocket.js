"use strict";
/**
 * @module botframework-streaming
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var crypto = require("crypto");
var http_1 = require("http");
var WebSocket = require("ws");
var NONCE_LENGTH = 16;
var NodeWebSocket = /** @class */ (function () {
    /**
     * Creates a new instance of the [NodeWebSocket](xref:botframework-streaming.NodeWebSocket) class.
     *
     * @param socket The `ws` WebSocket instance to build this connection on.
     */
    function NodeWebSocket(wsSocket) {
        this.wsSocket = wsSocket;
    }
    /**
     * Create and set a `ws` WebSocket with an HTTP Request, Socket and Buffer.
     * @param req INodeIncomingMessage
     * @param socket INodeSocket
     * @param head INodeBuffer
     */
    NodeWebSocket.prototype.create = function (req, socket, head) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                this.wsServer = new WebSocket.Server({ noServer: true });
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        try {
                            _this.wsServer.handleUpgrade(req, socket, head, function (websocket) {
                                _this.wsSocket = websocket;
                                resolve();
                            });
                        }
                        catch (err) {
                            reject(err);
                        }
                    })];
            });
        });
    };
    Object.defineProperty(NodeWebSocket.prototype, "isConnected", {
        /**
         * True if the 'ws' WebSocket is currently connected.
         */
        get: function () {
            return this.wsSocket && this.wsSocket.readyState === WebSocket.OPEN;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Writes a buffer to the socket and sends it.
     *
     * @param buffer The buffer of data to send across the connection.
     */
    NodeWebSocket.prototype.write = function (buffer) {
        this.wsSocket.send(buffer);
    };
    /**
     * Connects to the supporting socket using WebSocket protocol.
     *
     * @param serverAddress The address the server is listening on.
     * @param port The port the server is listening on, defaults to 8082.
     */
    NodeWebSocket.prototype.connect = function (serverAddress, port) {
        if (port === void 0) { port = 8082; }
        return __awaiter(this, void 0, void 0, function () {
            var wskey, options, req;
            var _this = this;
            return __generator(this, function (_a) {
                this.wsServer = new WebSocket.Server({ noServer: true });
                wskey = crypto.randomBytes(NONCE_LENGTH).toString('base64');
                options = {
                    port: port,
                    hostname: serverAddress,
                    headers: {
                        connection: 'upgrade',
                        'Sec-WebSocket-Key': wskey,
                        'Sec-WebSocket-Version': '13'
                    }
                };
                req = http_1.request(options);
                req.end();
                req.on('upgrade', function (res, socket, head) {
                    // @types/ws does not contain the signature for completeUpgrade
                    // https://github.com/websockets/ws/blob/0a612364e69fc07624b8010c6873f7766743a8e3/lib/websocket-server.js#L269
                    _this.wsServer.completeUpgrade(wskey, undefined, res, socket, head, function (websocket) {
                        _this.wsSocket = websocket;
                    });
                });
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        req.on('close', resolve);
                        req.on('error', reject);
                    })];
            });
        });
    };
    /**
     * Set the handler for `'data'` and `'message'` events received on the socket.
     */
    NodeWebSocket.prototype.setOnMessageHandler = function (handler) {
        this.wsSocket.on('data', handler);
        this.wsSocket.on('message', handler);
    };
    /**
     * Close the socket.
     * @remarks
     * Optionally pass in a status code and string explaining why the connection is closing.
     * @param code
     * @param data
     */
    NodeWebSocket.prototype.close = function (code, data) {
        return this.wsSocket.close(code, data);
    };
    /**
     * Set the callback to call when encountering socket closures.
     */
    NodeWebSocket.prototype.setOnCloseHandler = function (handler) {
        this.wsSocket.on('close', handler);
    };
    /**
     * Set the callback to call when encountering errors.
     */
    NodeWebSocket.prototype.setOnErrorHandler = function (handler) {
        this.wsSocket.on('error', function (error) { if (error) {
            handler(error);
        } });
    };
    return NodeWebSocket;
}());
exports.NodeWebSocket = NodeWebSocket;
//# sourceMappingURL=nodeWebSocket.js.map