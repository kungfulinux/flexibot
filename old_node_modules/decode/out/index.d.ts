import { Option } from 'kung-fu';
export declare class DecodeError extends Error {
    constructor(message: string);
}
export declare class Decoder<T> {
    private _run;
    constructor(_run: (data: any) => T);
    decodeObject(data: Object): T;
    decodeString(data: string): T;
    map<U>(f: (t: T) => U): Decoder<U>;
    andThen<U>(f: (t: T) => Decoder<U>): Decoder<U>;
    reason(f: (reason: string) => string): Decoder<T>;
    static fail<T>(message: string): Decoder<T>;
    static succeed<T>(value: T): Decoder<T>;
    static string: Decoder<string>;
    static number: Decoder<number>;
    static integer: Decoder<number>;
    static boolean: Decoder<boolean>;
    maybe(): Decoder<Option<T>>;
    array(): Decoder<Array<T>>;
    at(path: Array<string>): Decoder<T>;
    dict(): Decoder<{
        [key: string]: T;
    }>;
    static oneOf<T>(decoders: Array<Decoder<T>>): Decoder<T>;
    static object2<A, B, X>(a: Decoder<A>, b: Decoder<B>, f: (a: A, b: B) => X): Decoder<X>;
    static object3<A, B, C, X>(a: Decoder<A>, b: Decoder<B>, c: Decoder<C>, f: (a: A, b: B, c: C) => X): Decoder<X>;
    static object4<A, B, C, D, X>(a: Decoder<A>, b: Decoder<B>, c: Decoder<C>, d: Decoder<D>, f: (a: A, b: B, c: C, d: D) => X): Decoder<X>;
    static object5<A, B, C, D, E, X>(a: Decoder<A>, b: Decoder<B>, c: Decoder<C>, d: Decoder<D>, e: Decoder<E>, f: (a: A, b: B, c: C, d: D, e: E) => X): Decoder<X>;
    static object6<A, B, C, D, E, F, X>(a: Decoder<A>, b: Decoder<B>, c: Decoder<C>, d: Decoder<D>, e: Decoder<E>, f: Decoder<F>, x: (a: A, b: B, c: C, d: D, e: E, f: F) => X): Decoder<X>;
    static object7<A, B, C, D, E, F, G, X>(a: Decoder<A>, b: Decoder<B>, c: Decoder<C>, d: Decoder<D>, e: Decoder<E>, f: Decoder<F>, g: Decoder<G>, x: (a: A, b: B, c: C, d: D, e: E, f: F, g: G) => X): Decoder<X>;
    static object8<A, B, C, D, E, F, G, H, X>(a: Decoder<A>, b: Decoder<B>, c: Decoder<C>, d: Decoder<D>, e: Decoder<E>, f: Decoder<F>, g: Decoder<G>, h: Decoder<H>, x: (a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H) => X): Decoder<X>;
}
