import { Option } from './option';
export declare type ListPattern<T, X> = {
    nil: () => X;
    cons: (t: T, ts: List<T>) => X;
};
export declare class List<T> {
    private _arr;
    constructor(arr: Array<T>, begin?: number, end?: number);
    static empty<T>(): List<T>;
    static singleton<T>(t: T): List<T>;
    static fromArray<T>(arr: Array<T>): List<T>;
    toArray(): Array<T>;
    caseOf<X>(pattern: ListPattern<T, X>): X;
    length(): number;
    head(): Option<T>;
    tail(): List<T>;
    prepend(prev: T): List<T>;
    append(next: T): List<T>;
    concat(other: List<T>): List<T>;
    foldLeft<X>(step: (x: X, t: T) => X, init: X): X;
    scanLeft<X>(step: (x: X, t: T) => X, init: X): List<X>;
    zip<U, V>(other: List<U>, f: (t: T, u: U) => V): List<V>;
    map<U>(f: (t: T) => U): List<U>;
    map2<U, V>(other: List<U>, f: (t: T, u: U) => V): List<V>;
    flatMap<U>(f: (t: T) => List<U>): List<U>;
}
