import { Option } from './option';
export declare class PartialFunction<From, To> {
    call: (from: From) => Option<To>;
    constructor(call: (from: From) => Option<To>);
    static empty<From, To>(): PartialFunction<From, To>;
    static identity<T>(): PartialFunction<T, T>;
    and(other: PartialFunction<From, To>): PartialFunction<From, To>;
    compose<Result>(other: PartialFunction<To, Result>): PartialFunction<From, Result>;
    map<Result>(f: (to: To) => Result): PartialFunction<From, Result>;
    static concat<From, To>(fs: Array<PartialFunction<From, To>>): PartialFunction<From, To>;
    static asInstanceOf<T>(con: {
        new (...args: any[]): T;
    }): PartialFunction<Object, T>;
}
