"use strict";
const option_1 = require('./option');
class Either {
    constructor(caseOf) {
        this.caseOf = caseOf;
    }
    static left(l) {
        return new Either((pattern) => pattern.left(l));
    }
    static right(r) {
        return new Either((pattern) => pattern.right(r));
    }
    isLeft() {
        return this.caseOf({
            left: () => true,
            right: () => false
        });
    }
    isRight() {
        return this.caseOf({
            left: () => false,
            right: () => true
        });
    }
    getLeft() {
        return this.caseOf({
            left: (l) => l,
            right: () => {
                throw new TypeError('left is empty');
            }
        });
    }
    getRight() {
        return this.caseOf({
            left: () => {
                throw new TypeError('right is empty');
            },
            right: (r) => r
        });
    }
    map(mapL, mapR) {
        return this.caseOf({
            left: (l) => Either.left(mapL(l)),
            right: (r) => Either.right(mapR(r))
        });
    }
    mapLeft(mapL) {
        return this.map(mapL, r => r);
    }
    mapRight(mapR) {
        return this.map(l => l, mapR);
    }
    flatMapRight(f) {
        return this.caseOf({
            left: (lval) => {
                return Either.left(lval);
            },
            right: (rval) => {
                return f(rval);
            }
        });
    }
    flatMapLeft(f) {
        return this.caseOf({
            left: (lval) => {
                return f(lval);
            },
            right: (rval) => {
                return Either.right(rval);
            }
        });
    }
    toOption() {
        return this.caseOf({
            left: () => option_1.Option.none(),
            right: (r) => option_1.Option.some(r)
        });
    }
}
exports.Either = Either;
//# sourceMappingURL=either.js.map