import { Option } from './option';
export declare type EitherPattern<L, R, X> = {
    left: (l: L) => X;
    right: (r: R) => X;
};
export declare class Either<L, R> {
    caseOf: <X>(pattern: EitherPattern<L, R, X>) => X;
    constructor(caseOf: <X>(pattern: EitherPattern<L, R, X>) => X);
    static left<L, R>(l: L): Either<L, R>;
    static right<L, R>(r: R): Either<L, R>;
    isLeft(): boolean;
    isRight(): boolean;
    getLeft(): L;
    getRight(): R;
    map<X, Y>(mapL: (l: L) => X, mapR: (r: R) => Y): Either<X, Y>;
    mapLeft<X>(mapL: (l: L) => X): Either<X, R>;
    mapRight<X>(mapR: (l: R) => X): Either<L, X>;
    flatMapRight<X>(f: (val: R) => Either<L, X>): Either<L, X>;
    flatMapLeft<X>(f: (val: L) => Either<X, R>): Either<X, R>;
    toOption(): Option<R>;
}
