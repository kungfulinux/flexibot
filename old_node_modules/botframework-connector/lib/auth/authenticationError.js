"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
const botframework_schema_1 = require("botframework-schema");
class AuthenticationError extends Error {
    constructor(message, statusCode) {
        super(message);
        this.statusCode = statusCode;
    }
    static isStatusCodeError(err) {
        return !!(err && typeof err.statusCode === "number");
    }
    /**
     * Used to determine a status code from the error message for non-`IStatusCodeError`'s.
     * @param err The error thrown, used to determine an appropriate status code.
     */
    static determineStatusCodeAndBuildMessage(err) {
        const errMessage = (err && err.message) ? err.message : 'Internal Server Error';
        const code = AuthenticationError.determineStatusCode(errMessage);
        const connectionHeader = `Connection: 'close'\r\n`;
        return `HTTP/1.1 ${code} ${botframework_schema_1.StatusCodes[code]}\r\n${errMessage}\r\n${connectionHeader}\r\n`;
    }
    static determineStatusCode(message) {
        if (typeof message === 'string') {
            if (message.toLowerCase().startsWith('unauthorized')) {
                return botframework_schema_1.StatusCodes.UNAUTHORIZED;
            }
            else if (message.toLowerCase().startsWith(`'authheader'`)) {
                return botframework_schema_1.StatusCodes.BAD_REQUEST;
            }
        }
        return botframework_schema_1.StatusCodes.INTERNAL_SERVER_ERROR;
    }
}
exports.AuthenticationError = AuthenticationError;
//# sourceMappingURL=authenticationError.js.map