/**
 * @module botbuilder
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import { Activity, BotFrameworkSkill, InvokeResponse, SkillConversationIdFactoryBase } from 'botbuilder-core';
import { ICredentialProvider } from 'botframework-connector';
import { BotFrameworkHttpClient } from '../botFrameworkHttpClient';
/**
 * A BotFrameworkHttpClient specialized for Skills that encapsulates Conversation ID generation.
 */
export declare class SkillHttpClient extends BotFrameworkHttpClient {
    private readonly conversationIdFactory;
    constructor(credentialProvider: ICredentialProvider, conversationIdFactory: SkillConversationIdFactoryBase, channelService?: string);
    /**
     * Uses the SkillConversationIdFactory to create or retrieve a Skill Conversation Id, and sends the activity.
     * @template T The type of body in the InvokeResponse.
     * @param originatingAudience The OAuth audience scope, used during token retrieval. (Either https://api.botframework.com or bot app id.)
     * @param fromBotId The MicrosoftAppId of the bot sending the activity.
     * @param toSkill The skill to create the Conversation Id for.
     * @param callbackUrl The callback Url for the skill host.
     * @param activity The activity to send.
     */
    postToSkill<T>(originatingAudience: string, fromBotId: string, toSkill: BotFrameworkSkill, callbackUrl: string, activity: Activity): Promise<InvokeResponse<T>>;
    /**
     * Uses the SkillConversationIdFactory to create or retrieve a Skill Conversation Id, and sends the activity.
     * @deprecated This overload is deprecated. Please use SkillHttpClient.postToSkill() that takes an `originatingAudience`.
     * @param fromBotId The MicrosoftAppId of the bot sending the activity.
     * @param toSkill The skill to create the Conversation Id for.
     * @param callbackUrl The callback Url for the skill host.
     * @param activity The activity to send.
     */
    postToSkill(fromBotId: string, toSkill: BotFrameworkSkill, callbackUrl: string, activity: Activity): Promise<InvokeResponse>;
}
//# sourceMappingURL=skillHttpClient.d.ts.map