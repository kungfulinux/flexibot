/**
 * @module botbuilder
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import { ActivityHandler, AppBasedLinkQuery, ChannelInfo, FileConsentCardResponse, InvokeResponse, MessagingExtensionAction, MessagingExtensionActionResponse, MessagingExtensionQuery, MessagingExtensionResponse, O365ConnectorCardActionQuery, SigninStateVerificationQuery, TaskModuleRequest, TaskModuleResponse, TeamsChannelAccount, TeamInfo, TurnContext } from 'botbuilder-core';
export declare class TeamsActivityHandler extends ActivityHandler {
    /**
     * Invoked when an invoke activity is received from the connector.
     * Invoke activities can be used to communicate many different things.
     * @param context A context object for this turn.
     * @returns An Invoke Response for the activity.
     */
    protected onInvokeActivity(context: TurnContext): Promise<InvokeResponse>;
    /**
     * Handles a Teams Card Action Invoke activity.
     * @param context A context object for this turn.
     * @returns An Invoke Response for the activity.
     */
    protected handleTeamsCardActionInvoke(context: TurnContext): Promise<InvokeResponse>;
    /**
     * Receives invoke activities with Activity name of 'fileConsent/invoke'. Handlers registered here run before
     * `handleTeamsFileConsentAccept` and `handleTeamsFileConsentDecline`.
     * Developers are not passed a pointer to the next `handleTeamsFileConsent` handler because the _wrapper_ around
     * the handler will call `onDialogs` handlers after delegating to `handleTeamsFileConsentAccept` or `handleTeamsFileConsentDecline`.
     * @param context A context object for this turn.
     * @param fileConsentCardResponse Represents the value of the invoke activity sent when the user acts on a file consent card.
     * @returns A promise that represents the work queued.
     */
    protected handleTeamsFileConsent(context: TurnContext, fileConsentCardResponse: FileConsentCardResponse): Promise<void>;
    /**
     * Receives invoke activities with Activity name of 'fileConsent/invoke' with confirmation from user
     * @remarks
     * This type of invoke activity occur during the File Consent flow.
     * @param context A context object for this turn.
     * @param fileConsentCardResponse Represents the value of the invoke activity sent when the user acts on a file consent card.
     * @returns A promise that represents the work queued.
     */
    protected handleTeamsFileConsentAccept(context: TurnContext, fileConsentCardResponse: FileConsentCardResponse): Promise<void>;
    /**
     * Receives invoke activities with Activity name of 'fileConsent/invoke' with decline from user
     * @remarks
     * This type of invoke activity occur during the File Consent flow.
     * @param context A context object for this turn.
     * @param fileConsentCardResponse Represents the value of the invoke activity sent when the user acts on a file consent card.
     * @returns A promise that represents the work queued.
     */
    protected handleTeamsFileConsentDecline(context: TurnContext, fileConsentCardResponse: FileConsentCardResponse): Promise<void>;
    /**
     * Receives invoke activities with Activity name of 'actionableMessage/executeAction'.
     * @param context A context object for this turn.
     * @param query The O365 connector card HttpPOST invoke query.
     * @returnsa A promise that represents the work queued.
     */
    protected handleTeamsO365ConnectorCardAction(context: TurnContext, query: O365ConnectorCardActionQuery): Promise<void>;
    /**
     * Invoked when a signIn invoke activity is received from the connector.
     * @param context A context object for this turn.
     * @returns A promise that represents the work queued.
     */
    protected onSignInInvoke(context: TurnContext): Promise<void>;
    /**
     * Receives invoke activities with Activity name of 'signin/verifyState'.
     * @param context A context object for this turn.
     * @param query Signin state (part of signin action auth flow) verification invoke query.
     * @returns A promise that represents the work queued.
     */
    protected handleTeamsSigninVerifyState(context: TurnContext, query: SigninStateVerificationQuery): Promise<void>;
    /**
     * Receives invoke activities with Activity name of 'signin/tokenExchange'
     * @param context A context object for this turn.
     * @param query Signin state (part of signin action auth flow) verification invoke query
     * @returns A promise that represents the work queued.
     */
    protected handleTeamsSigninTokenExchange(context: TurnContext, query: SigninStateVerificationQuery): Promise<void>;
    /**
     * Receives invoke activities with Activity name of 'composeExtension/onCardButtonClicked'
     * @param context A context object for this turn.
     * @param cardData Object representing the card data.
     * @returns A promise that represents the work queued.
     */
    protected handleTeamsMessagingExtensionCardButtonClicked(context: TurnContext, cardData: any): Promise<void>;
    /**
     * Receives invoke activities with Activity name of 'task/fetch'
     * @param context A context object for this turn.
     * @param taskModuleRequest The task module invoke request value payload.
     * @returns A Task Module Response for the request.
     */
    protected handleTeamsTaskModuleFetch(context: TurnContext, taskModuleRequest: TaskModuleRequest): Promise<TaskModuleResponse>;
    /**
     * Receives invoke activities with Activity name of 'task/submit'
     * @param context A context object for this turn.
     * @param taskModuleRequest The task module invoke request value payload.
     * @returns A Task Module Response for the request.
     */
    protected handleTeamsTaskModuleSubmit(context: TurnContext, taskModuleRequest: TaskModuleRequest): Promise<TaskModuleResponse>;
    /**
     * Receives invoke activities with Activity name of 'composeExtension/queryLink'
     * @remarks
     * Used in creating a Search-based Message Extension.
     * @param context A context object for this turn.
     * @param query he invoke request body type for app-based link query.
     * @returns The Messaging Extension Response for the query.
     */
    protected handleTeamsAppBasedLinkQuery(context: TurnContext, query: AppBasedLinkQuery): Promise<MessagingExtensionResponse>;
    /**
     * Receives invoke activities with the name 'composeExtension/query'.
     * @remarks
     * Used in creating a Search-based Message Extension.
     * @param context A context object for this turn.
     * @param query The query for the search command.
     * @returns The Messaging Extension Response for the query.
     */
    protected handleTeamsMessagingExtensionQuery(context: TurnContext, query: MessagingExtensionQuery): Promise<MessagingExtensionResponse>;
    /**
     * Receives invoke activities with the name 'composeExtension/selectItem'.
     * @remarks
     * Used in creating a Search-based Message Extension.
     * @param context A context object for this turn.
     * @param query he object representing the query.
     * @returns The Messaging Extension Response for the query.
     */
    protected handleTeamsMessagingExtensionSelectItem(context: TurnContext, query: any): Promise<MessagingExtensionResponse>;
    /**
     * Receives invoke activities with the name 'composeExtension/submitAction' and dispatches to botMessagePreview-flows as applicable.
     * @remarks
     * A handler registered through this method does not dispatch to the next handler (either `handleTeamsMessagingExtensionSubmitAction`, `handleTeamsMessagingExtensionBotMessagePreviewEdit`, or `handleTeamsMessagingExtensionBotMessagePreviewSend`).
     * This method exists for developers to optionally add more logic before the TeamsActivityHandler routes the activity to one of the
     * previously mentioned handlers.
     * @param context A context object for this turn.
     * @param action The messaging extension action.
     * @returns The Messaging Extension Action Response for the action.
     */
    protected handleTeamsMessagingExtensionSubmitActionDispatch(context: TurnContext, action: MessagingExtensionAction): Promise<MessagingExtensionActionResponse>;
    /**
     * Receives invoke activities with the name 'composeExtension/submitAction'.
     * @param context A context object for this turn.
     * @param action The messaging extension action.
     * @returns The Messaging Extension Action Response for the action.
     */
    protected handleTeamsMessagingExtensionSubmitAction(context: TurnContext, action: MessagingExtensionAction): Promise<MessagingExtensionActionResponse>;
    /**
     * Receives invoke activities with the name 'composeExtension/submitAction' with the 'botMessagePreview' property present on activity.value.
     * The value for 'botMessagePreview' is 'edit'.
     * @param context A context object for this turn.
     * @param action The messaging extension action.
     * @returns The Messaging Extension Action Response for the action.
     */
    protected handleTeamsMessagingExtensionBotMessagePreviewEdit(context: TurnContext, action: MessagingExtensionAction): Promise<MessagingExtensionActionResponse>;
    /**
     * Receives invoke activities with the name 'composeExtension/submitAction' with the 'botMessagePreview' property present on activity.value.
     * The value for 'botMessagePreview' is 'send'.
     * @param context A context object for this turn.
     * @param action The messaging extension action.
     * @returns The Messaging Extension Action Response for the action.
     */
    protected handleTeamsMessagingExtensionBotMessagePreviewSend(context: TurnContext, action: MessagingExtensionAction): Promise<MessagingExtensionActionResponse>;
    /**
     * Receives invoke activities with the name 'composeExtension/fetchTask'
     * @param context A context object for this turn.
     * @param action The messaging extension action.
     * @returns The Messaging Extension Action Response for the action.
     */
    protected handleTeamsMessagingExtensionFetchTask(context: TurnContext, action: MessagingExtensionAction): Promise<MessagingExtensionActionResponse>;
    /**
     * Receives invoke activities with the name 'composeExtension/querySettingUrl'
     * @param context A context object for this turn.
     * @param query The Messaging extension query.
     * @returns The Messaging Extension Action Response for the query.
     */
    protected handleTeamsMessagingExtensionConfigurationQuerySettingUrl(context: TurnContext, query: MessagingExtensionQuery): Promise<MessagingExtensionResponse>;
    /**
     * Receives invoke activities with the name 'composeExtension/setting'
     * @param context A context object for this turn.
     * @param settings Object representing the configuration settings.
     * @returns A promise that represents the work queued.
     */
    protected handleTeamsMessagingExtensionConfigurationSetting(context: TurnContext, settings: any): Promise<void>;
    /**
     * Override this method to change the dispatching of ConversationUpdate activities.
     * @param context A context object for this turn.
     * @returns A promise that represents the work queued.
     */
    protected dispatchConversationUpdateActivity(context: TurnContext): Promise<void>;
    /**
     * Called in `dispatchConversationUpdateActivity()` to trigger the `'TeamsMembersAdded'` handlers.
     * @remarks
     * If no handlers are registered for the `'TeamsMembersAdded'` event, the `'MembersAdded'` handlers will run instead.
     * @param context A context object for this turn.
     * @returns A promise that represents the work queued.
     */
    protected onTeamsMembersAdded(context: TurnContext): Promise<void>;
    /**
     * Called in `dispatchConversationUpdateActivity()` to trigger the `'TeamsMembersRemoved'` handlers.
     * @remarks
     * If no handlers are registered for the `'TeamsMembersRemoved'` event, the `'MembersRemoved'` handlers will run instead.
     * @param context A context object for this turn.
     * @returns A promise that represents the work queued.
     */
    protected onTeamsMembersRemoved(context: TurnContext): Promise<void>;
    /**
     * Invoked when a Channel Created event activity is received from the connector.
     * Channel Created correspond to the user creating a new channel.
     * @param context A context object for this turn.
     * @returns A promise that represents the work queued.
     */
    protected onTeamsChannelCreated(context: any): Promise<void>;
    /**
     * Invoked when a Channel Deleted event activity is received from the connector.
     * Channel Deleted correspond to the user deleting a channel.
     * @param context A context object for this turn.
     * @returns A promise that represents the work queued.
     */
    protected onTeamsChannelDeleted(context: any): Promise<void>;
    /**
     * Invoked when a Channel Renamed event activity is received from the connector.
     * Channel Renamed correspond to the user renaming a new channel.
     * @param context A context object for this turn.
     * @returns A promise that represents the work queued.
     */
    protected onTeamsChannelRenamed(context: any): Promise<void>;
    /**
     * Invoked when a Team Archived event activity is received from the connector.
     * Team Archived correspond to the user archiving a team.
     * @param context The context for this turn.
     * @returns A promise that represents the work queued.
     */
    protected onTeamsTeamArchived(context: any): Promise<void>;
    /**
     * Invoked when a Team Deleted event activity is received from the connector.
     * Team Deleted correspond to the user deleting a team.
     * @param context The context for this turn.
     * @returns A promise that represents the work queued.
     */
    protected onTeamsTeamDeleted(context: any): Promise<void>;
    /**
     * Invoked when a Team Hard Deleted event activity is received from the connector.
     * Team Hard Deleted correspond to the user hard-deleting a team.
     * @param context The context for this turn.
     * @returns A promise that represents the work queued.
     */
    protected onTeamsTeamHardDeleted(context: any): Promise<void>;
    /**
     *
     * @param context
     * Invoked when a Channel Restored event activity is received from the connector.
     * Channel Restored correspond to the user restoring a previously deleted channel.
     * @param context The context for this turn.
     * @returns A promise that represents the work queued.
     */
    protected onTeamsChannelRestored(context: any): Promise<void>;
    /**
     * Invoked when a Team Renamed event activity is received from the connector.
     * Team Renamed correspond to the user renaming a team.
     * @param context The context for this turn.
     * @returns A promise that represents the work queued.
     */
    protected onTeamsTeamRenamed(context: any): Promise<void>;
    /**
     * Invoked when a Team Restored event activity is received from the connector.
     * Team Restored correspond to the user restoring a team.
     * @param context The context for this turn.
     * @returns A promise that represents the work queued.
     */
    protected onTeamsTeamRestored(context: any): Promise<void>;
    /**
     * Invoked when a Team Unarchived event activity is received from the connector.
     * Team Unarchived correspond to the user unarchiving a team.
     * @param context The context for this turn.
     * @returns A promise that represents the work queued.
     */
    protected onTeamsTeamUnarchived(context: any): Promise<void>;
    /**
     *
     * Override this in a derived class to provide logic for when members other than the bot
     * join the channel, such as your bot's welcome logic.
     * @param handler
     * @returns A promise that represents the work queued.
     */
    onTeamsMembersAddedEvent(handler: (membersAdded: TeamsChannelAccount[], teamInfo: TeamInfo, context: TurnContext, next: () => Promise<void>) => Promise<void>): this;
    /**
     * Override this in a derived class to provide logic for when members other than the bot
     * leave the channel, such as your bot's good-bye logic.
     * @param handler
     * @returns A promise that represents the work queued.
     */
    onTeamsMembersRemovedEvent(handler: (membersRemoved: TeamsChannelAccount[], teamInfo: TeamInfo, context: TurnContext, next: () => Promise<void>) => Promise<void>): this;
    /**
     * Override this in a derived class to provide logic for when a channel is created.
     * @param handler
     * @returns A promise that represents the work queued.
     */
    onTeamsChannelCreatedEvent(handler: (channelInfo: ChannelInfo, teamInfo: TeamInfo, context: TurnContext, next: () => Promise<void>) => Promise<void>): this;
    /**
     * Override this in a derived class to provide logic for when a channel is deleted.
     * @param handler
     * @returns A promise that represents the work queued.
     */
    onTeamsChannelDeletedEvent(handler: (channelInfo: ChannelInfo, teamInfo: TeamInfo, context: TurnContext, next: () => Promise<void>) => Promise<void>): this;
    /**
     * Override this in a derived class to provide logic for when a channel is renamed.
     * @param handler
     * @returns A promise that represents the work queued.
     */
    onTeamsChannelRenamedEvent(handler: (channelInfo: ChannelInfo, teamInfo: TeamInfo, context: TurnContext, next: () => Promise<void>) => Promise<void>): this;
    /**
     * Override this in a derived class to provide logic for when a team is archived.
     * @param handler
     * @returns A promise that represents the work queued.
     */
    onTeamsTeamArchivedEvent(handler: (teamInfo: TeamInfo, context: TurnContext, next: () => Promise<void>) => Promise<void>): this;
    /**
     * Override this in a derived class to provide logic for when a team is deleted.
     * @param handler
     * @returns A promise that represents the work queued.
     */
    onTeamsTeamDeletedEvent(handler: (teamInfo: TeamInfo, context: TurnContext, next: () => Promise<void>) => Promise<void>): this;
    /**
     * Override this in a derived class to provide logic for when a team is hard-deleted.
     * @param handler
     * @returns A promise that represents the work queued.
     */
    onTeamsTeamHardDeletedEvent(handler: (teamInfo: TeamInfo, context: TurnContext, next: () => Promise<void>) => Promise<void>): this;
    /**
     * Override this in a derived class to provide logic for when a channel is restored.
     * @param handler
     * @returns A promise that represents the work queued.
     */
    onTeamsChannelRestoredEvent(handler: (channelInfo: ChannelInfo, teamInfo: TeamInfo, context: TurnContext, next: () => Promise<void>) => Promise<void>): this;
    /**
     * Override this in a derived class to provide logic for when a team is renamed.
     * @param handler
     * @returns A promise that represents the work queued.
     */
    onTeamsTeamRenamedEvent(handler: (teamInfo: TeamInfo, context: TurnContext, next: () => Promise<void>) => Promise<void>): this;
    /**
     * Override this in a derived class to provide logic for when a team is restored.
     * @param handler
     * @returns A promise that represents the work queued.
     */
    onTeamsTeamRestoredEvent(handler: (teamInfo: TeamInfo, context: TurnContext, next: () => Promise<void>) => Promise<void>): this;
    /**
     * Override this in a derived class to provide logic for when a team is unarchived.
     * @param handler
     * @returns A promise that represents the work queued.
     */
    onTeamsTeamUnarchivedEvent(handler: (teamInfo: TeamInfo, context: TurnContext, next: () => Promise<void>) => Promise<void>): this;
}
//# sourceMappingURL=teamsActivityHandler.d.ts.map