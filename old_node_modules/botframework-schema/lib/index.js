"use strict";
/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var callerIdConstants_1 = require("./callerIdConstants");
exports.CallerIdConstants = callerIdConstants_1.CallerIdConstants;
var speechConstants_1 = require("./speechConstants");
exports.SpeechConstants = speechConstants_1.SpeechConstants;
/**
 * Defines values for RoleTypes.
 * Possible values include: 'user', 'bot'
 * @readonly
 * @enum {string}
 */
var RoleTypes;
(function (RoleTypes) {
    RoleTypes["User"] = "user";
    RoleTypes["Bot"] = "bot";
})(RoleTypes = exports.RoleTypes || (exports.RoleTypes = {}));
/**
 * Defines values for ActivityTypes.
 * Possible values include: 'message', 'contactRelationUpdate', 'conversationUpdate', 'typing',
 * 'endOfConversation', 'event', 'invoke', 'deleteUserData', 'messageUpdate', 'messageDelete',
 * 'installationUpdate', 'messageReaction', 'suggestion', 'trace', 'handoff'
 * @readonly
 * @enum {string}
 */
var ActivityTypes;
(function (ActivityTypes) {
    ActivityTypes["Message"] = "message";
    ActivityTypes["ContactRelationUpdate"] = "contactRelationUpdate";
    ActivityTypes["ConversationUpdate"] = "conversationUpdate";
    ActivityTypes["Typing"] = "typing";
    ActivityTypes["EndOfConversation"] = "endOfConversation";
    ActivityTypes["Event"] = "event";
    ActivityTypes["Invoke"] = "invoke";
    ActivityTypes["DeleteUserData"] = "deleteUserData";
    ActivityTypes["MessageUpdate"] = "messageUpdate";
    ActivityTypes["MessageDelete"] = "messageDelete";
    ActivityTypes["InstallationUpdate"] = "installationUpdate";
    ActivityTypes["MessageReaction"] = "messageReaction";
    ActivityTypes["Suggestion"] = "suggestion";
    ActivityTypes["Trace"] = "trace";
    ActivityTypes["Handoff"] = "handoff";
})(ActivityTypes = exports.ActivityTypes || (exports.ActivityTypes = {}));
/**
 * Defines values for TextFormatTypes.
 * Possible values include: 'markdown', 'plain', 'xml'
 * @readonly
 * @enum {string}
 */
var TextFormatTypes;
(function (TextFormatTypes) {
    TextFormatTypes["Markdown"] = "markdown";
    TextFormatTypes["Plain"] = "plain";
    TextFormatTypes["Xml"] = "xml";
})(TextFormatTypes = exports.TextFormatTypes || (exports.TextFormatTypes = {}));
/**
 * Defines values for AttachmentLayoutTypes.
 * Possible values include: 'list', 'carousel'
 * @readonly
 * @enum {string}
 */
var AttachmentLayoutTypes;
(function (AttachmentLayoutTypes) {
    AttachmentLayoutTypes["List"] = "list";
    AttachmentLayoutTypes["Carousel"] = "carousel";
})(AttachmentLayoutTypes = exports.AttachmentLayoutTypes || (exports.AttachmentLayoutTypes = {}));
/**
 * Defines values for MessageReactionTypes.
 * Possible values include: 'like', 'plusOne'
 * @readonly
 * @enum {string}
 */
var MessageReactionTypes;
(function (MessageReactionTypes) {
    MessageReactionTypes["Like"] = "like";
    MessageReactionTypes["PlusOne"] = "plusOne";
})(MessageReactionTypes = exports.MessageReactionTypes || (exports.MessageReactionTypes = {}));
/**
 * Defines values for InputHints.
 * Possible values include: 'acceptingInput', 'ignoringInput', 'expectingInput'
 * @readonly
 * @enum {string}
 */
var InputHints;
(function (InputHints) {
    InputHints["AcceptingInput"] = "acceptingInput";
    InputHints["IgnoringInput"] = "ignoringInput";
    InputHints["ExpectingInput"] = "expectingInput";
})(InputHints = exports.InputHints || (exports.InputHints = {}));
/**
 * Defines values for ActionTypes.
 * Possible values include: 'openUrl', 'imBack', 'postBack', 'playAudio', 'playVideo', 'showImage',
 * 'downloadFile', 'signin', 'call', messageBack', 'openApp'
 * @readonly
 * @enum {string}
 */
var ActionTypes;
(function (ActionTypes) {
    ActionTypes["OpenUrl"] = "openUrl";
    ActionTypes["ImBack"] = "imBack";
    ActionTypes["PostBack"] = "postBack";
    ActionTypes["PlayAudio"] = "playAudio";
    ActionTypes["PlayVideo"] = "playVideo";
    ActionTypes["ShowImage"] = "showImage";
    ActionTypes["DownloadFile"] = "downloadFile";
    ActionTypes["Signin"] = "signin";
    ActionTypes["Call"] = "call";
    // @deprecated Bot Framework no longer supports payments
    ActionTypes["Payment"] = "payment";
    ActionTypes["MessageBack"] = "messageBack";
    ActionTypes["OpenApp"] = "openApp";
})(ActionTypes = exports.ActionTypes || (exports.ActionTypes = {}));
/**
 * Defines values for EndOfConversationCodes.
 * Possible values include: 'unknown', 'completedSuccessfully', 'userCancelled', 'botTimedOut',
 * 'botIssuedInvalidMessage', 'channelFailed'
 * @readonly
 * @enum {string}
 */
var EndOfConversationCodes;
(function (EndOfConversationCodes) {
    EndOfConversationCodes["Unknown"] = "unknown";
    EndOfConversationCodes["CompletedSuccessfully"] = "completedSuccessfully";
    EndOfConversationCodes["UserCancelled"] = "userCancelled";
    EndOfConversationCodes["BotTimedOut"] = "botTimedOut";
    EndOfConversationCodes["BotIssuedInvalidMessage"] = "botIssuedInvalidMessage";
    EndOfConversationCodes["ChannelFailed"] = "channelFailed";
})(EndOfConversationCodes = exports.EndOfConversationCodes || (exports.EndOfConversationCodes = {}));
/**
 * Defines values for ActivityImportance.
 * Possible values include: 'low', 'normal', 'high'
 * @readonly
 * @enum {string}
 */
var ActivityImportance;
(function (ActivityImportance) {
    ActivityImportance["Low"] = "low";
    ActivityImportance["Normal"] = "normal";
    ActivityImportance["High"] = "high";
})(ActivityImportance = exports.ActivityImportance || (exports.ActivityImportance = {}));
/**
 * Defines values for DeliveryModes.
 * Possible values include: 'normal', 'notification', 'expectReplies', 'ephemeral'
 * @readonly
 * @enum {string}
 */
var DeliveryModes;
(function (DeliveryModes) {
    DeliveryModes["Normal"] = "normal";
    DeliveryModes["Notification"] = "notification";
    DeliveryModes["ExpectReplies"] = "expectReplies";
    DeliveryModes["Ephemeral"] = "ephemeral";
})(DeliveryModes = exports.DeliveryModes || (exports.DeliveryModes = {}));
/**
 * Defines values for ContactRelationUpdateActionTypes.
 * Possible values include: 'add', 'remove'
 * @readonly
 * @enum {string}
 */
var ContactRelationUpdateActionTypes;
(function (ContactRelationUpdateActionTypes) {
    ContactRelationUpdateActionTypes["Add"] = "add";
    ContactRelationUpdateActionTypes["Remove"] = "remove";
})(ContactRelationUpdateActionTypes = exports.ContactRelationUpdateActionTypes || (exports.ContactRelationUpdateActionTypes = {}));
/**
 * Defines values for InstallationUpdateActionTypes.
 * Possible values include: 'add', 'remove'
 * @readonly
 * @enum {string}
 */
var InstallationUpdateActionTypes;
(function (InstallationUpdateActionTypes) {
    InstallationUpdateActionTypes["Add"] = "add";
    InstallationUpdateActionTypes["Remove"] = "remove";
})(InstallationUpdateActionTypes = exports.InstallationUpdateActionTypes || (exports.InstallationUpdateActionTypes = {}));
/**
 * Defines values for SemanticActionStateTypes.
 * Possible values include: 'start', 'continue', 'done'
 * @readonly
 * @enum {string}
 */
var SemanticActionStateTypes;
(function (SemanticActionStateTypes) {
    SemanticActionStateTypes["Start"] = "start";
    SemanticActionStateTypes["Continue"] = "continue";
    SemanticActionStateTypes["Done"] = "done";
})(SemanticActionStateTypes = exports.SemanticActionStateTypes || (exports.SemanticActionStateTypes = {}));
/**
 * Defines values for ChannelIds for Channels.
 * Possible values include: 'console', 'cortana', 'directline', 'directlinespeech', 'email',
 * 'emulator', 'facebook', 'groupme', 'kik', 'line', 'msteams', 'skype', 'skypeforbusiness',
 * 'slack', 'sms', 'telegram', 'test', 'twilio-sms', 'webchat'
 * @readonly
 * @enum {string}
 */
var Channels;
(function (Channels) {
    Channels["Console"] = "console";
    Channels["Cortana"] = "cortana";
    Channels["Directline"] = "directline";
    Channels["DirectlineSpeech"] = "directlinespeech";
    Channels["Email"] = "email";
    Channels["Emulator"] = "emulator";
    Channels["Facebook"] = "facebook";
    Channels["Groupme"] = "groupme";
    Channels["Kik"] = "kik";
    Channels["Line"] = "line";
    Channels["Msteams"] = "msteams";
    Channels["Skype"] = "skype";
    Channels["Skypeforbusiness"] = "skypeforbusiness";
    Channels["Slack"] = "slack";
    Channels["Sms"] = "sms";
    Channels["Telegram"] = "telegram";
    Channels["Test"] = "test";
    Channels["Twilio"] = "twilio-sms";
    Channels["Webchat"] = "webchat";
})(Channels = exports.Channels || (exports.Channels = {}));
/**
 * Defines values for StatusCodes.
 * Possible values include: 200, 400, 401, 404, 405, 409, 426, 500, 501, 502
 * @readonly
 * @enum {number}
 */
var StatusCodes;
(function (StatusCodes) {
    StatusCodes[StatusCodes["OK"] = 200] = "OK";
    StatusCodes[StatusCodes["MULTIPLE_CHOICES"] = 300] = "MULTIPLE_CHOICES";
    StatusCodes[StatusCodes["BAD_REQUEST"] = 400] = "BAD_REQUEST";
    StatusCodes[StatusCodes["UNAUTHORIZED"] = 401] = "UNAUTHORIZED";
    StatusCodes[StatusCodes["NOT_FOUND"] = 404] = "NOT_FOUND";
    StatusCodes[StatusCodes["METHOD_NOT_ALLOWED"] = 405] = "METHOD_NOT_ALLOWED";
    StatusCodes[StatusCodes["CONFLICT"] = 409] = "CONFLICT";
    StatusCodes[StatusCodes["PRECONDITION_FAILED"] = 412] = "PRECONDITION_FAILED";
    StatusCodes[StatusCodes["UPGRADE_REQUIRED"] = 426] = "UPGRADE_REQUIRED";
    StatusCodes[StatusCodes["INTERNAL_SERVER_ERROR"] = 500] = "INTERNAL_SERVER_ERROR";
    StatusCodes[StatusCodes["NOT_IMPLEMENTED"] = 501] = "NOT_IMPLEMENTED";
    StatusCodes[StatusCodes["BAD_GATEWAY"] = 502] = "BAD_GATEWAY";
})(StatusCodes = exports.StatusCodes || (exports.StatusCodes = {}));
//# sourceMappingURL=index.js.map