"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const memoryScope_1 = require("./memoryScope");
/**
 * Base class for memory scopes based on BotState.
 */
class BotStateMemoryScope extends memoryScope_1.MemoryScope {
    /**
     * Initializes a new instance of the `BotStateMemoryScope` class.
     * @param name name of the property.
     */
    constructor(name) {
        super(name, true);
    }
    /**
     * Get the backing memory for this scope.
     * @param dc current dialog context
     */
    getMemory(dc) {
        const botState = dc.context.turnState.get(this.stateKey);
        if (botState) {
            return botState.get(dc.context);
        }
        return undefined;
    }
    /**
     * Changes the backing object for the memory scope.
     * @param dc current dialog context
     * @param memory memory
     */
    setMemory(dc, memory) {
        const botState = dc.context.turnState.get(this.stateKey);
        if (!botState) {
            throw new Error(`${this.stateKey} is not available.`);
        }
        throw new Error(`You cannot replace the root BotState object.`);
    }
    load(dc, force = false) {
        return __awaiter(this, void 0, void 0, function* () {
            const botState = dc.context.turnState.get(this.stateKey);
            if (botState) {
                yield botState.load(dc.context, force);
            }
        });
    }
    saveChanges(dc, force = false) {
        return __awaiter(this, void 0, void 0, function* () {
            const botState = dc.context.turnState.get(this.stateKey);
            if (botState) {
                yield botState.saveChanges(dc.context, force);
            }
        });
    }
    delete(dc) {
        return __awaiter(this, void 0, void 0, function* () {
            return Promise.resolve();
        });
    }
}
exports.BotStateMemoryScope = BotStateMemoryScope;
//# sourceMappingURL=botStateMemoryScope.js.map