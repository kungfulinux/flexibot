"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @module botbuilder-dialogs
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
const memoryScope_1 = require("./memoryScope");
const scopePath_1 = require("../scopePath");
/**
 * ClassMemoryScope maps "class" -> dc.activeDialog.properties
 */
class ClassMemoryScope extends memoryScope_1.MemoryScope {
    constructor(name = scopePath_1.ScopePath.class) {
        super(name, false);
    }
    getMemory(dc) {
        // if active dialog is a container dialog then "dialog" binds to it
        if (dc.activeDialog) {
            var dialog = this.onFindDialog(dc);
            if (dialog != undefined) {
                // Clone properties
                const clone = {};
                for (const key in dialog) {
                    const prop = dialog[key];
                    if (dialog.hasOwnProperty(key) && typeof prop != 'function') {
                        if (isExpression(prop)) {
                            const { value, error } = prop.tryGetValue(dc.state);
                            if (!error) {
                                clone[key] = value;
                            }
                        }
                        else {
                            clone[key] = prop;
                        }
                    }
                }
                return clone;
            }
        }
        return undefined;
    }
    /**
     * Override to find the dialog instance referenced by the scope.
     * @param dc Current dialog context.
     */
    onFindDialog(dc) {
        return dc.findDialog(dc.activeDialog.id);
    }
}
exports.ClassMemoryScope = ClassMemoryScope;
function isExpression(prop) {
    return (typeof prop == 'object' && typeof prop['tryGetValue'] == 'function');
}
//# sourceMappingURL=classMemoryScope.js.map