/**
 * @module botbuilder-dialogs
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import { TurnContext, BotState, ConversationState, UserState, TurnContextStateCollection } from 'botbuilder-core';
import { DialogTurnResult, Dialog } from './dialog';
import { Configurable } from './configurable';
import { DialogSet } from './dialogSet';
import { DialogStateManagerConfiguration } from './memory';
export interface DialogManagerResult {
    turnResult: DialogTurnResult;
}
export interface DialogManagerConfiguration {
    /**
     * State property used to persist the bots dialog stack.
     */
    conversationState: BotState;
    /**
     * Root dialog to start from [onTurn()](#onturn) method.
     */
    rootDialog: Dialog;
    /**
     * Optional. Bots persisted user state.
     */
    userState?: UserState;
    /**
     * Optional. Number of milliseconds to expire the bots conversation state after.
     */
    expireAfter?: number;
    /**
     * Optional. Path resolvers and memory scopes used for conversations with the bot.
     */
    stateConfiguration?: DialogStateManagerConfiguration;
}
export declare class DialogManager extends Configurable {
    private _rootDialogId;
    private readonly _dialogStateProperty;
    private readonly _initialTurnState;
    constructor(rootDialog?: Dialog, dialogStateProperty?: string);
    /**
     * Bots persisted conversation state.
     */
    conversationState: ConversationState;
    /**
     * Optional. Bots persisted user state.
     */
    userState?: UserState;
    /**
     * Values that will be copied to the `TurnContext.turnState` at the beginning of each turn.
     */
    readonly initialTurnState: TurnContextStateCollection;
    /**
     * Root dialog to start from [onTurn()](#onturn) method.
     */
    rootDialog: Dialog;
    /**
     * Global dialogs that you want to have be callable.
     */
    dialogs: DialogSet;
    /**
     * Optional. Path resolvers and memory scopes used for conversations with the bot.
     */
    stateConfiguration?: DialogStateManagerConfiguration;
    /**
     * Optional. Number of milliseconds to expire the bots conversation state after.
     */
    expireAfter?: number;
    configure(config: Partial<DialogManagerConfiguration>): this;
    onTurn(context: TurnContext): Promise<DialogManagerResult>;
    private sendStateSnapshotTrace;
    private handleSkillOnTurn;
    private handleBotOnTurn;
}
//# sourceMappingURL=dialogManager.d.ts.map