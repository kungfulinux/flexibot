/**
 * @module botbuilder-dialogs
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import { Activity, TurnContext } from 'botbuilder-core';
import { BeginSkillDialogOptions } from './beginSkillDialogOptions';
import { Dialog, DialogInstance, DialogReason, DialogTurnResult } from './dialog';
import { DialogContext } from './dialogContext';
import { SkillDialogOptions } from './skillDialogOptions';
export declare class SkillDialog extends Dialog<Partial<BeginSkillDialogOptions>> {
    protected dialogOptions: SkillDialogOptions;
    private readonly DeliveryModeStateKey;
    private readonly SkillConversationIdStateKey;
    /**
     * A sample dialog that can wrap remote calls to a skill.
     *
     * @remarks
     * The options parameter in `beginDialog()` must be a `SkillDialogArgs` object with the initial parameters
     * for the dialog.
     *
     * @param dialogOptions
     * @param dialogId
     */
    constructor(dialogOptions: SkillDialogOptions, dialogId?: string);
    beginDialog(dc: DialogContext, options: BeginSkillDialogOptions): Promise<DialogTurnResult>;
    continueDialog(dc: DialogContext): Promise<DialogTurnResult>;
    endDialog(context: TurnContext, instance: DialogInstance, reason: DialogReason): Promise<void>;
    repromptDialog(context: TurnContext, instance: DialogInstance): Promise<void>;
    resumeDialog(dc: DialogContext, reason: DialogReason, result?: any): Promise<DialogTurnResult>;
    /**
     * @protected
     * Validates the activity sent during continueDialog.
     * @remarks
     * Override this method to implement a custom validator for the activity being sent during the continueDialog.
     * This method can be used to ignore activities of a certain type if needed.
     * If this method returns false, the dialog will end the turn without processing the activity.
     * @param activity The Activity for the current turn of conversation.
     */
    protected onValidateActivity(activity: Activity): boolean;
    /**
     * @private
     * Clones the Activity entity.
     * @param activity Activity to clone.
     */
    private cloneActivity;
    private validateBeginDialogArgs;
    private sendToSkill;
    /**
     * Tells us if we should intercept the OAuthCard message.
     * @remarks
     * The SkillDialog only attempts to intercept OAuthCards when the following criteria are met:
     * 1. An OAuthCard was sent from the skill
     * 2. The SkillDialog was called with a connectionName
     * 3. The current adapter supports token exchange
     * If any of these criteria are false, return false.
     * @private
     */
    private interceptOAuthCards;
    private sendTokenExchangeInvokeToSkill;
    private createSkillConversationId;
    private getSkillConversationIdFromInstance;
}
//# sourceMappingURL=skillDialog.d.ts.map