"use strict";
/**
 * @module botbuilder
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Defines the level of severity for the event.
 */
var Severity;
(function (Severity) {
    Severity[Severity["Verbose"] = 0] = "Verbose";
    Severity[Severity["Information"] = 1] = "Information";
    Severity[Severity["Warning"] = 2] = "Warning";
    Severity[Severity["Error"] = 3] = "Error";
    Severity[Severity["Critical"] = 4] = "Critical";
})(Severity = exports.Severity || (exports.Severity = {}));
class NullTelemetryClient {
    constructor(settings) {
        // noop
    }
    trackPageView(telemetry) {
        // noop
    }
    trackDependency(telemetry) {
        // noop
    }
    trackEvent(telemetry) {
        // noop
    }
    trackException(telemetry) {
        // noop
    }
    trackTrace(telemetry) {
        // noop
    }
    flush() {
        // noop
    }
}
exports.NullTelemetryClient = NullTelemetryClient;
function telemetryTrackDialogView(telemetryClient, dialogName, properties, metrics) {
    if (!clientSupportsTrackDialogView(telemetryClient)) {
        throw new TypeError('"telemetryClient" parameter does not have methods trackPageView() or trackTrace()');
    }
    if (instanceOfBotPageViewTelemetryClient(telemetryClient)) {
        telemetryClient.trackPageView({ name: dialogName, properties: properties, metrics: metrics });
    }
    else {
        telemetryClient.trackTrace({ message: 'Dialog View: ' + dialogName, severityLevel: Severity.Information });
    }
}
exports.telemetryTrackDialogView = telemetryTrackDialogView;
function instanceOfBotPageViewTelemetryClient(object) {
    return 'trackPageView' in object;
}
function clientSupportsTrackDialogView(client) {
    if (!client) {
        return false;
    }
    if (typeof client.trackPageView !== 'function' && typeof client.trackTrace !== 'function') {
        return false;
    }
    return true;
}
//# sourceMappingURL=botTelemetryClient.js.map